# Kamron Cole (kjc8084@rit.edu)
# Modified Ansible script to set up network with PFsense by Alex Nasca
- name: Localhost setup
  hosts: localhost
  roles:
    - localhost_setup


- name: Deploy Networks
  hosts: localhost
  vars:
    networks:
      red:
        subnet:
          address: 88.31.10.0/24
        dhcp: false
        port_security_enabled: false
      local_1:
        subnet: 
          address: 192.168.1.0/24
        dhcp: false
        port_security_enabled: false
        instances:
          local_console_pfsense:
            image: UbuntuJammy2204-Desktop
            image_size: 40
            flavor: small
            fixed_ipv4: 192.168.1.222
            key_name: netDeploy
      remote_1:
        subnet: 
          address: 10.0.1.0/24
        dhcp: false
        port_security_enabled: false
        instances:
          remote_console_pfsense:
            image: UbuntuJammy2204-Desktop
            image_size: 40
            flavor: small
            fixed_ipv4: 10.0.1.222
            key_name: netDeploy
      sat_1:
        subnet: 
          address: 172.128.1.0/24
        dhcp: false
        port_security_enabled: false
        instances:
          sat_console_pfsense:
            image: UbuntuJammy2204-Desktop
            image_size: 40
            flavor: small
            fixed_ipv4: 172.128.1.222
            key_name: netDeploy
      # local_2:
      #   subnet: 
      #     address: 192.168.2.0/24
      #   dhcp: false
      #   port_security_enabled: false
      # remote_2:
      #   subnet: 
      #     address: 10.0.2.0/24
      #   dhcp: false
      #   port_security_enabled: false
      # sat_2:
      #   subnet: 
      #     address: 172.128.2.0/24
      #   dhcp: false
      #   port_security_enabled: false
  vars_files:
    - ./vars/deploy_vars.yml

  tasks:
    - name: Deploy Networks
      include_role:
        name: deploy_network_instance
      loop: "{{ networks | dict2items }}"
      loop_control:
        loop_var: network
      ignore_errors: yes


- name: Deploy pfSense Routers
  hosts: localhost
  vars:
    op_router_connections:
      - remote_1_subnet
      - remote_2_subnet

    pf_routers:
      team_1_main:
        image: PFsense-2.6.0-Cloudinit
        image_size: 40
        flavor: medium
        connections:
          red: # First is WAN by defualt
            # Cannot configure control interface after deploy
            address: 88.31.10.1
            control: 88.31.10.250
          remote_1: # Seconds is LAN by defualt
            address: 10.0.1.254
          local_1: # Any interface after second must manually be set to up
            address: 192.168.1.1
      outer_1:
        image: PFsense-2.6.0-Cloudinit
        image_size: 40
        flavor: medium
        connections:
          remote_1:
            address: 10.0.1.253
          sat_1:
            address: 172.128.1.1
            control: 172.128.1.250
      # team_2_main:
      #   image: PFsense-2.6.0-Cloudinit
      #   image_size: 40
      #   flavor: medium
      #   connections:
      #     red:
      #       address: 88.31.10.254
      #     remote_2:
      #       address: 10.0.2.254
      #     local_2:
      #       address: 192.168.2.1
      # outer_2:
      #   image: PFsense-2.6.0-Cloudinit
      #   image_size: 40
      #   flavor: medium
      #   connections:
      #     remote_2:
      #       address: 10.0.2.253
      #     sat_2:
      #       address: 172.128.2.1
      #       control: 172.128.2.250
  vars_files:
    - ./vars/deploy_vars.yml

  tasks:
    - name: Deploy pfSense Routers
      include_role:
        name: deploy_pfsense_instance
      loop: "{{ pf_routers | dict2items }}"
      loop_control:
        loop_var: router

    # - name: Connect Main Router to Remotes
    #   command:
    #     cmd: "openstack router add subnet {{ deploy_net.router.name }} {{ item }}"
    #   loop: "{{ op_router_connections }}"
    #   ignore_errors: yes

    - name: Pause for instance setup
      pause: 
        seconds: 60


- name: Configure pfSense Instances
  hosts: pfsense
  gather_facts: false
  vars:
    router_interfaces:
      team_1_main_pfsense:
        address: "88.31.10.1"
        interfaces:
          remote:
            iface: vtnet1
            ipv4_type: static
            ipv4: 10.0.1.254
            cidr: 24
            enable: true
          lan:
            iface: vtnet2
            ipv4_type: static
            ipv4: 192.168.1.1
            cidr: 24
            enable: true
        gateways:
          sat_1_net:
            iface: remote
            gateway: 10.0.1.253
          grey_net:
            iface: remote
            gateway: 10.0.1.252
        routes:
          sat_1_net:
            network: 172.128.1.0/24
            gateway: sat_1_net
            iface: remote
          grey_net:
            network: 10.0.0.0/24
            gateway: grey_net
      outer_1_pfsense:
        address: "172.128.1.1"
        interfaces:
          wan:
            iface: vtnet0
            ipv4_type: static
            ipv4: 10.0.1.253
            cidr: 24
            enable: true
        gateways:
          wan_gw:
            iface: wan
            gateway: 10.0.1.254
            is_default: true
      # team_2_main_pfsense:
      #   address: "88.31.10.254"
      #   interfaces:
      #     remote:
      #       iface: vtnet1
      #       ipv4_type: static
      #       ipv4: 10.0.2.254
      #       cidr: 24
      #       enable: true
      #     lan:
      #       iface: vtnet2
      #       ipv4_type: static
      #       ipv4: 192.168.2.1
      #       cidr: 24
      #       enable: true
      #   gateways:
      #     sat_2_net:
      #       iface: remote
      #       gateway: 10.0.2.253
      #     grey_net:
      #       iface: remote
      #       gateway: 10.0.2.252
      #   routes:
      #     sat_2_net:
      #       network: 172.128.2.0/24
      #       gateway: sat_2_net
      #     grey_net:
      #       network: 10.0.0.0/24
      #       gateway: grey_net
      # outer_2_pfsense:
      #   address: "172.128.2.1"
      #   interfaces:
      #     wan:
      #       iface: vtnet0
      #       ipv4_type: static
      #       ipv4: 10.0.2.253
      #       cidr: 24
      #       enable: true
      #   gateways:
      #     wan_gw:
      #       iface: wan
      #       gateway: 10.0.2.254
            default: true
        # routes:
        #   grey_net:
        #     network: 10.0.0.0/24
        #     gateway: grey_net

    params: "{{ lookup('pfsensible.core.pfsense', './vars/pfsense_config.yml', 'all_definitions') }}"

  tasks:
    - name: Configure Interfaces
      when: ansible_ssh_host == router.value.address and router.value.interfaces is defined
      include_role:
        name: config_pfsense_interface
      loop: "{{ router_interfaces | dict2items }}"
      loop_control:
        loop_var: router
        label: "{{ router.key }}"

    - name: Configure Gateways
      when: ansible_ssh_host == router.value.address and router.value.gateways is defined
      include_role:
        name: config_pfsense_gateway
      loop: "{{ router_interfaces | dict2items }}"
      loop_control:
        loop_var: router
        label: "{{ router.key }}"

    - name: Configure Static Routes
      when: ansible_ssh_host == router.value.address and router.value.gateways is defined and router.value.routes is defined
      include_role:
        name: config_pfsense_route
      loop: "{{ router_interfaces | dict2items }}"
      loop_control:
        loop_var: router
        label: "{{ router.key }}"

    - name: Configure Firewall Rules
      include_role:
        name: config_pfsense_firewalls


# - name: Deploy Openstack Routers
#   hosts: localhost
#   vars:
#     op_routers:
#       link:
#         internet: false
#         interfaces:
#           - net: remote_1_net
#             subnet: remote_1_subnet
#           - net: remote_2_net
#             subnet: remote_2_subnet
#           - net: red_net
#             subnet: red_subnet
#   vars_files:
#     - ./vars/deploy_vars.yml

#   tasks:
#     - name: Deploy Openstack Routers
#       include_role:
#         name: deploy_openstack_router
#       loop: "{{ op_routers | dict2items }}"
#       loop_control:
#         loop_var: router


# - name: Deploy Infrastructure
#   hosts: localhost
#   vars:
#     instances:
#       local_example:
#         image: UbuntuJammy2204-Desktop
#         image_size: 40
#         flavor: small
#         network: local_1
#         fixed_address: 10.0.1.10
#         control_port_addr: 10.0.1.254
#       remote_example:
#         image: UbuntuJammy2204-Desktop
#         image_size: 40
#         flavor: small
#         network: remote_1
#         fixed_address: 10.0.2.10
#         control_port_addr: 10.0.2.254
#       local_2_example:
#         image: UbuntuJammy2204-Desktop
#         image_size: 40
#         flavor: small
#         network: local_2
#         fixed_address: 10.0.1.10
#         control_port_addr: 10.0.3.254
#       remote_2_example:
#         image: UbuntuJammy2204-Desktop
#         image_size: 40
#         flavor: small
#         network: remote_2
#         fixed_address: 10.0.2.10
#         control_port_addr: 10.0.2.254

# - name: Cleanup Ports
#   hosts: localhost
#   vars:
#     pf_routers: "{{ hostvars['localhost']['pf_routers'] }}"
#   vars_files:
#     - ./vars/deploy_vars.yml
  
#   tasks:
#     - name: "Delete Port {{ router.key }}"
#       include_role:
#         name: cleanup
#       loop: "{{ pf_routers | dict2items }}"
#       loop_control:
#         loop_var: router