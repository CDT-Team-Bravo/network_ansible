# Kamron Cole (kjc8084@rit.edu)
# Modified Ansible script to set up network with PFsense by Alex Nasca
- name: Localhost setup
  hosts: localhost
  roles:
    - localhost_setup


# - name: Deploy Networks
#   hosts: localhost
#   vars:
#     networks:
#       red:
#         subnet:
#           address: 88.31.10.0/24
#           gateway_ip: "88.31.10.1"
#         dhcp: false
#         port_security_enabled: false
#         instances:
#           red_console_pfsense:
#             image: UbuntuJammy2204-Desktop
#             image_size: 40
#             flavor: small
#             fixed_ipv4: 88.31.10.222
#             key_name: netDeploy
#       local_1:
#         subnet: 
#           address: 192.168.1.0/24
#           gateway_ip: "192.168.1.1"
#         dhcp: false
#         port_security_enabled: false
#         instances:
#           local_console_pfsense:
#             image: UbuntuJammy2204-Desktop
#             image_size: 40
#             flavor: small
#             fixed_ipv4: 192.168.1.222
#             key_name: netDeploy
#       remote_1:
#         subnet: 
#           address: 10.0.1.0/24
#           gateway_ip: "10.0.1.254"
#         dhcp: false
#         port_security_enabled: false
#         instances:
#           remote_console_pfsense:
#             image: UbuntuJammy2204-Desktop
#             image_size: 40
#             flavor: small
#             fixed_ipv4: 10.0.1.222
#             key_name: netDeploy
#       sat_1:
#         subnet: 
#           address: 172.128.1.0/24
#           gateway_ip: "172.128.1.1"
#         dhcp: false
#         port_security_enabled: false
#         instances:
#           sat_console_pfsense:
#             image: UbuntuJammy2204-Desktop
#             image_size: 40
#             flavor: small
#             fixed_ipv4: 172.128.1.222
#             key_name: netDeploy
#       local_2:
#         subnet: 
#           address: 192.168.2.0/24
#           gateway_ip: "192.168.2.1"
#         dhcp: false
#         port_security_enabled: false
#         instances:
#           local_console_pfsense:
#             image: UbuntuJammy2204-Desktop
#             image_size: 40
#             flavor: small
#             fixed_ipv4: 192.168.2.222
#             key_name: netDeploy
#       remote_2:
#         subnet: 
#           address: 10.0.2.0/24
#           gateway_ip: "10.0.2.254"
#         dhcp: false
#         port_security_enabled: false
#         instances:
#           remote_console_pfsense:
#             image: UbuntuJammy2204-Desktop
#             image_size: 40
#             flavor: small
#             fixed_ipv4: 10.0.2.222
#             key_name: netDeploy
#       sat_2:
#         subnet: 
#           address: 172.128.2.0/24
#           gateway_ip: "172.128.2.1"
#         dhcp: false
#         port_security_enabled: false
#         instances:
#           sat_console_pfsense:
#             image: UbuntuJammy2204-Desktop
#             image_size: 40
#             flavor: small
#             fixed_ipv4: 172.128.2.222
#             key_name: netDeploy
#   vars_files:
#     - ./vars/deploy_vars.yml

#   tasks:
#     - name: Deploy Networks
#       include_role:
#         name: deploy_network_instance
#       loop: "{{ networks | dict2items }}"
#       loop_control:
#         loop_var: network
#       ignore_errors: yes


# - name: Deploy pfSense Routers
#   hosts: localhost
#   vars:
#     pf_routers:
#       team_1_main:
#         image: PFsense-2.6.0-Cloudinit
#         image_size: 40
#         flavor: medium
#         control: 10.0.0.230 # WAN by default
#         connections:
#           red: # Lan by default
#             address: 88.31.10.1
#           remote_1: # Rest must manually be set to up
#             address: 10.0.1.254
#           local_1:
#             address: 192.168.1.1
#       outer_1:
#         image: PFsense-2.6.0-Cloudinit
#         image_size: 40
#         flavor: medium
#         control: 10.0.0.231
#         connections:
#           sat_1:
#             address: 172.128.1.1
#           remote_1:
#             address: 10.0.1.253
#       team_2_main:
#         image: PFsense-2.6.0-Cloudinit
#         image_size: 40
#         flavor: medium
#         control: 10.0.0.232
#         connections:
#           red:
#             address: 88.31.10.254
#           remote_2:
#             address: 10.0.2.254
#           local_2:
#             address: 192.168.2.1
#       outer_2:
#         image: PFsense-2.6.0-Cloudinit
#         image_size: 40
#         flavor: medium
#         control: 10.0.0.233
#         connections:
#           sat_2:
#             address: 172.128.2.1
#           remote_2:
#             address: 10.0.2.253
#   vars_files:
#     - ./vars/deploy_vars.yml

#   tasks:
#     - name: Deploy pfSense Routers
#       include_role:
#         name: deploy_pfsense_instance
#       loop: "{{ pf_routers | dict2items }}"
#       loop_control:
#         loop_var: router

#     - name: Rest
#       pause: 
#         seconds: 60


- name: Configure pfSense Instances
  hosts: pfsense
  gather_facts: true
  vars:
    router_interfaces:
      team_1_main_pfsense:
        address: "10.0.0.230"
        interfaces:
          control:
            iface: vtnet0
            ipv4_type: static
            ipv4: 10.0.0.230
            cidr: 24
            enable: true
          wan:
            iface: vtnet1
            ipv4_type: static
            ipv4: 88.31.10.1
            ipv4_gateway: wan_next_gw
            cidr: 24
            enable: true
          remote:
            iface: vtnet2
            ipv4_type: static
            ipv4: 10.0.1.254
            cidr: 24
            enable: true
          lan:
            iface: vtnet3
            ipv4_type: static
            ipv4: 192.168.1.1
            cidr: 24
            enable: true
        gateways:
          wan_gw:
            iface: wan
            gateway: 88.31.10.1
            is_default: true
          wan_next_gw:
            iface: wan
            gateway: 88.31.10.254
          sat_gw:
            iface: remote
            gateway: 10.0.1.253
          remote_gw:
            iface: remote
            gateway: 10.0.1.254
        routes:
          sat_route:
            network: 172.128.1.0/24
            gateway: sat_gw
            iface: remote
      outer_1_pfsense:
        address: "10.0.0.231"
        interfaces:
          control:
            iface: vtnet0
            ipv4_type: static
            ipv4: 10.0.0.231
            cidr: 24
            enable: true
          lan:
            iface: vtnet1
            ipv4_type: static
            ipv4: 172.128.1.1
            cidr: 24
            enable: true
          wan:
            iface: vtnet2
            ipv4_type: static
            ipv4: 10.0.1.253
            ipv4_gateway: remote_next_gw
            cidr: 24
            enable: true
        gateways:
          remote_next_gw:
            iface: wan
            gateway: 10.0.1.254
            is_default: true
          remote_gw:
            iface: wan
            gateway: 10.0.1.253
        routes:
          local_route:
            network: 192.168.1.0/24
            gateway: remote_next_gw
          wan_route:
            network: 88.31.10.0/24
            gateway: remote_next_gw
      team_2_main_pfsense:
        address: "10.0.0.232"
        interfaces:
          control:
            iface: vtnet0
            ipv4_type: static
            ipv4: 10.0.0.232
            cidr: 24
            enable: true
          wan:
            iface: vtnet1
            ipv4_type: static
            ipv4: 88.31.10.254
            ipv4_gateway: wan_next_gw
            cidr: 24
            enable: true
          remote:
            iface: vtnet2
            ipv4_type: static
            ipv4: 10.0.2.254
            cidr: 24
            enable: true
          lan:
            iface: vtnet3
            ipv4_type: static
            ipv4: 192.168.2.1
            cidr: 24
            enable: true
        gateways:
          wan_gw:
            iface: wan
            gateway: 88.31.10.254
            is_default: true
          wan_next_gw:
            iface: wan
            gateway: 88.31.10.1
          sat_gw:
            iface: remote
            gateway: 10.0.2.253
          remote_gw:
            iface: remote
            gateway: 10.0.2.254
        routes:
          sat_route:
            network: 172.128.2.0/24
            gateway: sat_gw
            iface: remote
      outer_2_pfsense:
        address: "10.0.0.233"
        interfaces:
          control:
            iface: vtnet0
            ipv4_type: static
            ipv4: 10.0.0.233
            cidr: 24
            enable: true
          lan:
            iface: vtnet1
            ipv4_type: static
            ipv4: 172.128.2.1
            cidr: 24
            enable: true
          wan:
            iface: vtnet2
            ipv4_type: static
            ipv4: 10.0.2.253
            ipv4_gateway: remote_next_gw
            cidr: 24
            enable: true
        gateways:
          remote_next_gw:
            iface: wan
            gateway: 10.0.2.254
            is_default: true
          remote_gw:
            iface: wan
            gateway: 10.0.2.253
        routes:
          local_route:
            network: 192.168.2.0/24
            gateway: remote_next_gw
          wan_route:
            network: 88.31.10.0/24
            gateway: remote_next_gw

    params: "{{ lookup('pfsensible.core.pfsense', './vars/pfsense_config.yml', 'all_definitions') }}"

  tasks:
    - name: Configure Interfaces
      when: ansible_ssh_host == router.value.address and router.value.interfaces is defined
      include_role:
        name: config_pfsense_interface
      loop: "{{ router_interfaces | dict2items }}"
      loop_control:
        loop_var: router
        label: "{{ router.key }}"
  
    - name: Rest
      pause:
        seconds: 60
  
    - name: Configure Gateways
      when: ansible_ssh_host == router.value.address and router.value.gateways is defined
      include_role:
        name: config_pfsense_gateway
      loop: "{{ router_interfaces | dict2items }}"
      loop_control:
        loop_var: router
        label: "{{ router.key }}"
  
    - name: Configure Static Routes
      when: ansible_ssh_host == router.value.address and router.value.gateways is defined and router.value.routes is defined
      include_role:
        name: config_pfsense_route
      loop: "{{ router_interfaces | dict2items }}"
      loop_control:
        loop_var: router
        label: "{{ router.key }}"

    - name: Configure Firewall Rules
      include_role:
        name: config_pfsense_firewalls


# - name: Deploy Openstack Routers
#   hosts: localhost
#   vars:
#     op_routers:
#       link:
#         internet: false
#         interfaces:
#           - net: remote_1_net
#             subnet: remote_1_subnet
#           - net: remote_2_net
#             subnet: remote_2_subnet
#           - net: red_net
#             subnet: red_subnet
#   vars_files:
#     - ./vars/deploy_vars.yml

#   tasks:
#     - name: Deploy Openstack Routers
#       include_role:
#         name: deploy_openstack_router
#       loop: "{{ op_routers | dict2items }}"
#       loop_control:
#         loop_var: router


# - name: Deploy Infrastructure
#   hosts: localhost
#   vars:
#     instances:
#       local_example:
#         image: UbuntuJammy2204-Desktop
#         image_size: 40
#         flavor: small
#         network: local_1
#         fixed_address: 10.0.1.10
#         control_port_addr: 10.0.1.254
#       remote_example:
#         image: UbuntuJammy2204-Desktop
#         image_size: 40
#         flavor: small
#         network: remote_1
#         fixed_address: 10.0.2.10
#         control_port_addr: 10.0.2.254
#       local_2_example:
#         image: UbuntuJammy2204-Desktop
#         image_size: 40
#         flavor: small
#         network: local_2
#         fixed_address: 10.0.1.10
#         control_port_addr: 10.0.3.254
#       remote_2_example:
#         image: UbuntuJammy2204-Desktop
#         image_size: 40
#         flavor: small
#         network: remote_2
#         fixed_address: 10.0.2.10
#         control_port_addr: 10.0.2.254

- name: Cleanup localhost
  hosts: localhost
  vars:
    pf_routers: "{{ hostvars['localhost']['pf_routers'] }}"
  vars_files:
    - ./vars/deploy_vars.yml
  
  tasks:
    # - name: "Delete Ports"
    #   include_role:
    #     name: cleanup_localhost
    #   loop: "{{ pf_routers | dict2items }}"
    #   loop_control:
    #     loop_var: router

    - name: Get outer pfsense ports
      shell:
        cmd: "openstack port list -f json"
      register: current_port_info

    - name: Delete outer pfsense ports
      when: port["Fixed IP Addresses"].0.ip_address == "10.0.0.231" or port["Fixed IP Addresses"].0.ip_address == "10.0.0.233"
      shell:
        cmd: "openstack port delete {{ port['ID'] }}"
      loop: "{{ current_port_info.stdout | from_json }}"
      loop_control:
        loop_var: port


# - name: Cleanup pfsense
#   hosts: pfsense
#   vars:
#     pf_routers: "{{ hostvars['localhost']['router_interfaces'] }}"
#   vars_files:
#     - ./vars/deploy_vars.yml
  
#   tasks:
#     - name: "Disable control interface for outer"
#       include_role:
#         name: cleanup_pfsense
#       loop: "{{ pf_routers | dict2items }}"
#       loop_control:
#         loop_var: router