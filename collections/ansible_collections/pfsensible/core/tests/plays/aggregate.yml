- hosts: pfsense
  gather_facts: false
  tasks:
    - name: Set result
      set_fact:
        result_aliases:
          - "create alias 'one_host', type='host', address='10.9.8.7', descr='', detail=''"
          - "create alias 'another_host', type='host', address='10.9.8.6', descr='', detail=''"
          - "create alias 'one_server', type='host', address='192.168.1.165', descr='', detail=''"
          - "create alias 'port_ssh', type='port', address='2222', descr='', detail=''"

    - name: Test creation of a some aliases
      pfsensible.core.pfsense_aggregate:
        purge_aliases: false
        aggregated_aliases:
          - name: one_host
            type: host
            address: 10.9.8.7
          - name: another_host
            type: host
            address: 10.9.8.6
          - name: one_server
            type: host
            address: 192.168.1.165
            descr: ''
            detail: ''
          - name: port_ssh
            type: port
            address: 2222
          - name: port_http
            state: absent
      register: aggregate
      failed_when: aggregate.result_aliases != result_aliases

    - name: Set result
      set_fact:
        result_aliases:
          - "delete alias 'one_host'"
          - "delete alias 'another_host'"
          - "delete alias 'one_server'"
          - "delete alias 'port_ssh'"

    - name: Test deletion of a some aliases
      pfsensible.core.pfsense_aggregate:
        purge_aliases: false
        aggregated_aliases:
          - name: one_host
            state: absent
          - name: another_host
            state: absent
          - name: one_server
            type: host
            address: 192.168.1.165
            descr: ''
            detail: ''
            state: absent
          - name: port_ssh
            type: port
            address: 2222
            state: absent
          - name: port_http
            state: absent
      register: aggregate
      failed_when: aggregate.result_aliases != result_aliases
#       result_aliases = []
#       result_aliases.append("create alias 'one_host', type='host', address='10.9.8.7'")
#       result_aliases.append("create alias 'another_host', type='host', address='10.9.8.6'")
#       result_aliases.append("update alias 'port_ssh' set address='2222', descr=none, detail=none")
#       result_aliases.append("delete alias 'port_http'")

#       self.assertEqual(result['result_aliases'], result_aliases)
#       self.assert_find_alias('one_host')
#       self.assert_find_alias('another_host')
#       self.assert_find_alias('one_server')
#       self.assert_find_alias('port_ssh')
#       self.assert_not_find_alias('port_http')
#       self.assert_find_alias('port_dns')

#   def test_aggregate_aliases_checkmode(self):
#       """ test creation of a some aliases with check_mode """
#       args = dict(
#           purge_aliases=False,
#           aggregated_aliases=[
#               dict(name='one_host', type='host', address='10.9.8.7'),
#               dict(name='another_host', type='host', address='10.9.8.6'),
#               dict(name='one_server', type='host', address='192.168.1.165', descr='', detail=''),
#               dict(name='port_ssh', type='port', address='2222'),
#               dict(name='port_http', state='absent'),
#           ],
#           _ansible_check_mode=True,
#       )
#       set_module_args(args)
#       result = self.execute_module(changed=True)
#       result_aliases = []
#       result_aliases.append("create alias 'one_host', type='host', address='10.9.8.7'")
#       result_aliases.append("create alias 'another_host', type='host', address='10.9.8.6'")
#       result_aliases.append("update alias 'port_ssh' set address='2222', descr=none, detail=none")
#       result_aliases.append("delete alias 'port_http'")

#       self.assertEqual(result['result_aliases'], result_aliases)
#       self.assertFalse(self.load_xml_result())

#   def test_aggregate_aliases_purge(self):
#       """ test creation of a some aliases with purge """
#       args = dict(
#           purge_aliases=True,
#           purge_rules=False,
#           aggregated_aliases=[
#               dict(name='one_host', type='host', address='10.9.8.7'),
#               dict(name='another_host', type='host', address='10.9.8.6'),
#               dict(name='one_server', type='host', address='192.168.1.165', descr='', detail=''),
#               dict(name='port_ssh', type='port', address='2222'),
#               dict(name='port_http', state='absent'),
#           ]
#       )
#       set_module_args(args)
#       result = self.execute_module(changed=True)
#       result_aliases = []
#       result_aliases.append("create alias 'one_host', type='host', address='10.9.8.7'")
#       result_aliases.append("create alias 'another_host', type='host', address='10.9.8.6'")
#       result_aliases.append("update alias 'port_ssh' set address='2222', descr=none, detail=none")
#       result_aliases.append("delete alias 'port_http'")
#       result_aliases.append("delete alias 'port_dns'")

#       self.assertEqual(result['result_aliases'], result_aliases)
#       self.assert_find_alias('one_host')
#       self.assert_find_alias('another_host')
#       self.assert_find_alias('one_server')
#       self.assert_find_alias('port_ssh')
#       self.assert_not_find_alias('port_http')
#       self.assert_not_find_alias('port_dns')

#   def test_aggregate_rules(self):
#       """ test creation of a some rules """
#       args = dict(
#           purge_rules=False,
#           aggregated_rules=[
#               dict(name='one_rule', source='any', destination='any', interface='lan'),
#               dict(name='any2any_ssh', source='any', destination='any:2222', interface='lan', protocol='tcp'),
#               dict(name='any2any_http', source='any', destination='any:8080', interface='vpn', protocol='tcp'),
#               dict(name='any2any_ssh', state='absent', interface='vpn'),
#           ]
#       )
#       set_module_args(args)
#       self.execute_module(changed=True)
#       self.assert_find_rule('one_rule', 'lan')
#       self.assert_find_rule('any2any_ssh', 'lan')
#       self.assert_find_rule('any2any_http', 'lan')
#       self.assert_find_rule('any2any_https', 'lan')
#       self.assert_not_find_rule('any2any_ssh', 'opt1')
#       self.assert_find_rule('any2any_http', 'opt1')
#       self.assert_find_rule('any2any_https', 'opt1')

#   def test_aggregate_rules_purge(self):
#       """ test creation of a some rules with purge """
#       args = dict(
#           purge_rules=True,
#           aggregated_rules=[
#               dict(name='one_rule', source='any', destination='any', interface='lan'),
#               dict(name='any2any_ssh', source='any', destination='any:2222', interface='lan', protocol='tcp'),
#               dict(name='any2any_http', source='any', destination='any:8080', interface='vpn', protocol='tcp'),
#               dict(name='any2any_ssh', state='absent', interface='vpn'),
#           ]
#       )
#       set_module_args(args)
#       self.execute_module(changed=True)
#       self.assert_find_rule('one_rule', 'lan')
#       self.assert_find_rule('any2any_ssh', 'lan')
#       self.assert_not_find_rule('any2any_http', 'lan')
#       self.assert_not_find_rule('any2any_https', 'lan')
#       self.assert_not_find_rule('any2any_ssh', 'opt1')
#       self.assert_find_rule('any2any_http', 'opt1')
#       self.assert_not_find_rule('any2any_https', 'opt1')

#   def test_aggregate_separators(self):
#       """ test creation of a some separators """
#       args = dict(
#           purge_rule_separators=False,
#           aggregated_rule_separators=[
#               dict(name='one_separator', interface='lan'),
#               dict(name='another_separator', interface='lan_100'),
#               dict(name='another_test_separator', interface='lan', state='absent'),
#               dict(name='test_separator', interface='lan', before='bottom', color='warning'),
#           ]
#       )
#       set_module_args(args)
#       result = self.execute_module(changed=True)
#       result_separators = []
#       result_separators.append("create rule_separator 'one_separator' on 'lan', color='info'")
#       result_separators.append("create rule_separator 'another_separator' on 'lan_100', color='info'")
#       result_separators.append("delete rule_separator 'another_test_separator' on 'lan'")
#       result_separators.append("update rule_separator 'test_separator' on 'lan' set color='warning', before='bottom'")

#       self.assertEqual(result['result_rule_separators'], result_separators)
#       self.assert_find_rule_separator('one_separator', 'lan')
#       self.assert_find_rule_separator('another_separator', 'lan_100')
#       self.assert_not_find_rule_separator('another_test_separator', 'lan')
#       self.assert_find_rule_separator('test_separator', 'lan')

#   def test_aggregate_separators_purge(self):
#       """ test creation of a some separators with purge """
#       args = dict(
#           purge_rule_separators=True,
#           aggregated_rule_separators=[
#               dict(name='one_separator', interface='lan'),
#               dict(name='another_separator', interface='lan_100'),
#               dict(name='another_test_separator', interface='lan', state='absent'),
#               dict(name='test_separator', interface='lan', before='bottom', color='warning'),
#           ]
#       )
#       set_module_args(args)
#       result = self.execute_module(changed=True)
#       result_separators = []
#       result_separators.append("create rule_separator 'one_separator' on 'lan', color='info'")
#       result_separators.append("create rule_separator 'another_separator' on 'lan_100', color='info'")
#       result_separators.append("delete rule_separator 'another_test_separator' on 'lan'")
#       result_separators.append("update rule_separator 'test_separator' on 'lan' set color='warning', before='bottom'")
#       result_separators.append("delete rule_separator 'test_separator' on 'wan'")
#       result_separators.append("delete rule_separator 'last_test_separator' on 'lan'")
#       result_separators.append("delete rule_separator 'test_sep_floating' on 'floating'")

#       self.assertEqual(result['result_rule_separators'], result_separators)
#       self.assert_find_rule_separator('one_separator', 'lan')
#       self.assert_find_rule_separator('another_separator', 'lan_100')
#       self.assert_not_find_rule_separator('another_test_separator', 'lan')
#       self.assert_find_rule_separator('test_separator', 'lan')
#       self.assert_not_find_rule_separator('last_test_separator', 'lan')
#       self.assert_not_find_rule_separator('test_sep_floating', 'floatingrules')

#   def test_aggregate_vlans(self):
#       """ test creation of some vlans """
#       args = dict(
#           purge_vlans=False,
#           aggregated_vlans=[
#               dict(vlan_id=100, interface='vmx0', descr='voice'),
#               dict(vlan_id=1200, interface='vmx1', state='absent'),
#               dict(vlan_id=101, interface='vmx1', descr='printers'),
#               dict(vlan_id=102, interface='vmx2', descr='users'),
#           ]
#       )
#       set_module_args(args)
#       result = self.execute_module(changed=True)
#       result_aliases = []
#       result_aliases.append("update vlan 'vmx0.100' set descr='voice'")
#       result_aliases.append("delete vlan 'vmx1.1200'")
#       result_aliases.append("create vlan 'vmx1.101', descr='printers', priority=''")
#       result_aliases.append("create vlan 'vmx2.102', descr='users', priority=''")

#       self.assertEqual(result['result_vlans'], result_aliases)
#       self.assert_find_vlan('vmx0', '100')
#       self.assert_not_find_vlan('vmx1', '1200')
#       self.assert_find_vlan('vmx1', '101')
#       self.assert_find_vlan('vmx2', '102')

#   def test_aggregate_vlans_with_purge(self):
#       """ test creation of some vlans with purge"""
#       args = dict(
#           purge_vlans=True,
#           aggregated_vlans=[
#               dict(vlan_id=1100, interface='vmx1'),
#               dict(vlan_id=1200, interface='vmx1', state='absent'),
#               dict(vlan_id=101, interface='vmx1', descr='printers'),
#               dict(vlan_id=102, interface='vmx2', descr='users'),
#           ]
#       )
#       set_module_args(args)
#       result = self.execute_module(changed=True)
#       result_aliases = []
#       result_aliases.append("delete vlan 'vmx1.1200'")
#       result_aliases.append("create vlan 'vmx1.101', descr='printers', priority=''")
#       result_aliases.append("create vlan 'vmx2.102', descr='users', priority=''")
#       result_aliases.append("delete vlan 'vmx0.100'")

#       self.assertEqual(result['result_vlans'], result_aliases)
#       self.assert_not_find_vlan('vmx1', '1200')
#       self.assert_find_vlan('vmx1', '101')
#       self.assert_find_vlan('vmx2', '102')
#       self.assert_not_find_vlan('vmx0', '100')
